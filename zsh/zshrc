ttyctl -f

export TERM=xterm-256color
POWERLEVEL9K_DISABLE_CONFIGURATION_WIZARD=true

# Allow mapping Ctrl+S and Ctrl+Q shortcuts
# [[ -r ${TTY:-} && -w ${TTY:-} && $+commands[stty] == 1 ]] && stty -ixon <$TTY >$TTY
unsetopt FLOW_CONTROL      # Disable start/stop characters in shell editor.

# Options
setopt extendedglob 
setopt clobber
setopt nomatch 
setopt notify
setopt RC_QUOTES
setopt globdots
setopt promptsubst
unsetopt beep

# Jobs
setopt LONG_LIST_JOBS     # List jobs in the long format by default.
setopt AUTO_RESUME        # Attempt to resume existing job before creating a new process.
setopt NOTIFY             # Report status of background jobs immediately.
unsetopt BG_NICE          # Don't run all background jobs at a lower priority.
unsetopt HUP              # Don't kill jobs on shell exit.
unsetopt CHECK_JOBS       # Don't report on jobs when shell exit.

# COLORS
[ -s "$HOME/.dir_colors" ] && eval "$(dircolors --sh "$HOME/.dir_colors")" || eval "$(dircolors --sh)"

# Termcap
export LESS_TERMCAP_mb=$'\E[01;31m'      # Begins blinking.
export LESS_TERMCAP_md=$'\E[01;31m'      # Begins bold.
export LESS_TERMCAP_me=$'\E[0m'          # Ends mode.
export LESS_TERMCAP_se=$'\E[0m'          # Ends standout-mode.
export LESS_TERMCAP_so=$'\E[00;47;30m'   # Begins standout-mode.
export LESS_TERMCAP_ue=$'\E[0m'          # Ends underline.
export LESS_TERMCAP_us=$'\E[01;32m'      # Begins underline.

# autoload -U colors && colors
# export LESS_TERMCAP_mb=$fg_bold[$MAN_SOMETHING]
# export LESS_TERMCAP_md=$fg_bold[$MAN_HEADER]
# export LESS_TERMCAP_me=$reset_color
# export LESS_TERMCAP_se=$reset_color
# export LESS_TERMCAP_so=$fg_bold[$MAN_BOLD]
# export LESS_TERMCAP_ue=$reset_color
# export LESS_TERMCAP_us=$'\E[4;34m'

# EDITOR

WORDCHARS='*?_-.[]~&;!#$%^(){}<>'
# autoload -U select-word-style && select-word-style bash

# Keybinds
# Reset to default key bindings.
# bindkey -d

bindkey -e

function _nop {  ; }

function prepend-sudo {
  if [[ "$BUFFER" != su(do|)\ * ]]; then
    BUFFER="sudo $BUFFER"
    (( CURSOR += 5 ))
  fi
}
zle -N prepend-sudo
bindkey '\C-X\C-S' prepend-sudo

function glob-alias {
  zle _expand_alias
  zle expand-word
  zle magic-space
}
zle -N glob-alias
bindkey '\C- ' glob-alias

# bindkey <> expand-cmd-path

# # Home, End
bindkey '^[[H' beginning-of-line
bindkey '^[[F' end-of-line

# # Up, Down
# bindkey '^[[A' up-line-or-search
# bindkey '^[[B' down-line-or-search

# # Alt-left, Alt-right
# bindkey '^[[1;3C' forward-word
# bindkey '^[[1;3D' backward-word

# # Ctrl-left, Ctrl-right
# bindkey '^[[1;5C' forward-word
# bindkey '^[[1;5D' backward-word

# # Alt-n/p to Ctrl-n/p
# bindkey '^[p' up-history
# bindkey '^[n' down-history

zmodload zsh/complist
bindkey -M menuselect '^M' .accept-line
bindkey -M menuselect '^[a' accept-search
bindkey '^[[Z' reverse-menu-complete

bindkey '^[q' kill-buffer
bindkey '^[l' clear-screen
bindkey '^[u' undo
bindkey '^[U' redo
bindkey "^[m" copy-prev-shell-word
bindkey ' ' magic-space

# HISTORY
HISTFILE=~/.zhistory
HISTSIZE=10000
SAVEHIST=10000

setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ':start:elapsed;command' format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire a duplicate event first when trimming history.
setopt HIST_IGNORE_DUPS          # Do not record an event that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete an old recorded event if a new event is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a previously found event.
setopt HIST_IGNORE_SPACE         # Do not record an event starting with a space.
setopt HIST_SAVE_NO_DUPS         # Do not write a duplicate event to the history file.
setopt HIST_VERIFY               # Do not execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing non-existent history.

# DIRECTORIES
# setopt AUTO_CD              # Auto changes to a directory without typing cd.
setopt AUTO_PUSHD           # Push the old directory onto the stack on cd.
setopt PUSHD_IGNORE_DUPS    # Do not store duplicates in the stack.
setopt PUSHD_SILENT         # Do not print the directory stack after pushd or popd.
setopt PUSHD_TO_HOME        # Push to home directory when no argument is given.
setopt CDABLE_VARS          # Change directory to a path stored in a variable.
setopt MULTIOS              # Write to multiple descriptors.

alias d='dirs -v'

autoload -Uz chpwd_recent_dirs add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
chpwd() {
    emulate -L zsh
    command ls -oh --color=always --group-directories-first
}

# UTILITY
alias help='run-help'
unalias run-help
autoload -Uz run-help
autoload -Uz run-help-git
autoload -Uz run-help-ip
autoload -Uz run-help-openssl
autoload -Uz run-help-sudo
autoload -Uz run-help-svn

autoload -Uz bracketed-paste-url-magic
zle -N bracketed-paste bracketed-paste-url-magic
autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic

# export GREP_COLORS="mt=37;45"
# alias p='less'
# alias sa='alias | grep -i'
# alias lx='ll -XB'        # Lists sorted by extension (GNU only).
# alias lk='ll -Sr'        # Lists sorted by size, largest last.
# alias lt='ll -tr'        # Lists sorted by date, most recent last.
# alias lc='lt -c'         # Lists sorted by date, most recent last, shows change time.
# function slit {
#   awk "{ print ${(j:,:):-\$${^@}} }"
# }


# COMPLETION
setopt COMPLETE_IN_WORD    # Complete from both ends of a word.
setopt ALWAYS_TO_END       # Move cursor to the end of a completed word.
setopt PATH_DIRS           # Perform path search even on command names with slashes.
# setopt AUTO_MENU           # Show completion menu on a successive tab press.
setopt AUTO_LIST           # Automatically list choices on ambiguous completion.
# setopt AUTO_PARAM_SLASH    # If completed parameter is a directory, add a trailing slash.
# unsetopt MENU_COMPLETE     # Do not autoselect the first completion entry.

# Case-insensitive (all), partial-word, and then substring completion.
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
unsetopt CASE_GLOB

# Fuzzy match mistyped completions.
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric
zstyle ':completion:*' expand prefix

# Group matches and describe.
zstyle ':completion:*' menu select
# zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'
zstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose yes

# Increase the number of errors based on the length of the typed word. But make
# sure to cap (at 7) the max-errors to avoid hanging.
zstyle -e ':completion:*:approximate:*' max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3>7?7:($#PREFIX+$#SUFFIX)/3))numeric)'

# Don't complete unavailable commands.
zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'

# Array completion element sorting.
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# Directories
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:*:cd:*' tag-order local-directories directory-stack path-directories
zstyle ':completion:*:*:cd:*:directory-stack' menu yes select
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
zstyle ':completion:*' squeeze-slashes true

# History
zstyle ':completion:*:history-words' stop yes
zstyle ':completion:*:history-words' remove-all-dups yes
zstyle ':completion:*:history-words' list false
zstyle ':completion:*:history-words' menu yes

# Environmental Variables
zstyle ':completion::*:(-command-|export):*' fake-parameters ${${${_comps[(I)-value-*]#*,}%%,*}:#-*-}

# TODO: does this work?
zstyle ':completion::complete:*' gain-privileges 1

# # Don't complete uninteresting users...
# zstyle ':completion:*:*:*:users' ignored-patterns \
#   adm amanda apache avahi beaglidx bin cacti canna clamav daemon \
#   dbus distcache dovecot fax ftp games gdm gkrellmd gopher \
#   hacluster haldaemon halt hsqldb ident junkbust ldap lp mail \
#   mailman mailnull mldonkey mysql nagios \
#   named netdump news nfsnobody nobody nscd ntp nut nx openvpn \
#   operator pcap postfix postgres privoxy pulse pvm quagga radvd \
#   rpc rpcuser rpm shutdown squid sshd sync uucp vcsa xfs '_*'

# # ... unless we really want to.
# zstyle '*' single-ignored show

# # Ignore multiple entries.
# zstyle ':completion:*:(rm|kill|diff):*' ignore-line other
# zstyle ':completion:*:rm:*' file-patterns '*:all-files'

# Kill
zstyle ':completion:*:*:*:*:processes' command 'ps -u $LOGNAME -o pid,user,command -w'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;36=0=01'
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:*:kill:*' force-list always
zstyle ':completion:*:*:kill:*' insert-ids single

# Man
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.(^1*)' insert-sections true

# # SSH/SCP/RSYNC
# zstyle ':completion:*:(ssh|scp|rsync):*' tag-order 'hosts:-host:host hosts:-domain:domain hosts:-ipaddr:ip\ address *'
# zstyle ':completion:*:(scp|rsync):*' group-order users files all-files hosts-domain hosts-host hosts-ipaddr
# zstyle ':completion:*:ssh:*' group-order users hosts-domain hosts-host users hosts-ipaddr
# zstyle ':completion:*:(ssh|scp|rsync):*:hosts-host' ignored-patterns '*(.|:)*' loopback ip6-loopback localhost ip6-localhost broadcasthost
# zstyle ':completion:*:(ssh|scp|rsync):*:hosts-domain' ignored-patterns '<->.<->.<->.<->' '^[-[:alnum:]]##(.[-[:alnum:]]##)##' '*@*'
# zstyle ':completion:*:(ssh|scp|rsync):*:hosts-ipaddr' ignored-patterns '^(<->.<->.<->.<->|(|::)([[:xdigit:].]##:(#c,2))##(|%*))' '127.0.0.<->' '255.255.255.255' '::1' 'fe80::*'

available() {
    command -v "$1" &> /dev/null
}

fancy-ctrl-z () {
  if [[ $#BUFFER -eq 0 ]]; then
    BUFFER="fg"
    zle accept-line -w
  else
    zle push-input -w
    zle clear-screen -w
  fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z

_accept_suggestion() {
    # zle autosuggest-accept
    zle forward-char
    zle accept-line
}
zle -N _accept_suggestion
bindkey 'w' _accept_suggestion

# Shortcuts
alias z='vim ~/.zshrc'
alias vr='vim ~/.config/nvim/init.vim'
alias todo='vim ~/.todo.txt'
alias ws='cd /workspace/'

alias h='history -nd -50'
alias sc='systemctl'
alias vim='nvim'
alias mx='chmod +x'
alias ..='cd ..'
alias ...='cd ../..'

if available bat; then alias cat='bat'; fi
alias ag='ag --hidden --ignore .git'
alias rg='rg -uuS' # hidden + ignored, smartcase
alias fd='fd -H'

alias ls='ls -h --color=auto --group-directories-first'
alias l='ls -lG'
alias ll='ls -laG'
alias lh='ls -ld .?*'
alias lr='command ls -h --color=auto -lArtG'

t()  { exa --group-directories-first -lT --color always $@ | less}
tt() { exa --group-directories-first -laT --color always $@ | less}
t2() { exa --group-directories-first -lT -L2 --color always $@ | less}

#alias tm='tmux'
alias tl='tmux ls'
alias tn='tmux new -As'
ta() { [[ -z $@ ]] && tmux attach || tmux attach -t $@ }

alias dus='du -hs * | sort -h'
alias col='column -s, -t | less -S'
alias pg='pgrep -laif'
alias pt='pstree -h'
alias pk='pkill'
alias path='echo $PATH | tr ":" "\n"'

# Docker
alias dc='docker ps'
alias dp='docker ps'
alias dca='docker ps -a'
alias dpa='docker ps -a'
alias di='docker images'
alias din='docker inspect'
alias dr='docker run'
alias ds='docker start'
alias dsp='docker stop'
alias dk='docker stop'
alias da='docker attach'
alias dl='docker logs'
alias dn='docker network'
alias drm='docker rm'
alias drmi='docker rmi'
alias dcp='docker container prune -f'
alias dv='docker volume'

# Git
clone() {git clone $1 && cd $(basename $1 .git)}
alias g='git status -sb'
alias gg='git status'
alias ga='git add'
alias gb='git branch -avv'
alias grm='git remote -v'
alias gc='git checkout'
alias co='git checkout'
alias cm='git commit -v'
alias ca='git commit -av'
alias gd='git diff'
alias gdd='git diff --staged'
alias gds='git diff --stat'
alias gdds='git diff --staged --stat'
alias gdt='git difftool'
alias gdw='git diff --word-diff'
alias gf='git fetch'
alias gfp='git fetch --prune'
alias gfa='git fetch --all --prune'
alias gm='git merge'
alias gpl='git pull'
alias pull='git pull'
alias gpu='git push'
alias push='git push'
alias gsh='git show'
alias gl='git log --oneline'
alias gll='git log --oneline --all'
alias glg='git log --graph --oneline --all'
alias gls='git log --stat'
alias glp='git log -p'
alias gwh='git whatchanged -p --abbrev-commit'
alias gsb='git show-branch'
alias sw='git switch'
alias gr='git reset'
alias grh='git reset --hard'
alias grs='git restore'
alias grb='git rebase'
# alias gg='git pull --ff-only'
alias gst='git stash'
alias gsp='git stash pop'
alias gsl='git shortlog -n --no-merges'
function gi() { curl -sLw n https://www.gitignore.io/api/$@ ;}
#todo: git extras has ignore command?
alias redit='vim $(git ls-tree --full-tree -r --name-only HEAD | fzf)'
alias gignore='vim $(git rev-parse --show-toplevel)/.gitignore'

siblings() {
    local target=$(command fd -d1 -td . .. --color=always | ag -v ${PWD:t} | fzf -1 -0 --ansi )
    [[ -n $target ]] && [[ -d $target ]] && cd "${target}"
}
alias s='siblings'

_local_files() {
    zle kill-buffer
    # local file=$(find -type f | fzf --prompt='./' --ansi --preview 'bat --color=always --style=header,grid --line-range :300 {}')
    local file=$(find -L -type f | fzf --prompt='./' --ansi --preview 'bat --color=always --style=header,grid --line-range :300 {}')
    if [[ -n $file ]]; then
        file=$(realpath $file)
        zle redisplay
        if [[ ! $(file --mime $file) =~ 'binary' ]]; then
            BUFFER="vim \"${file}\""
            zle accept-line
        fi
    else
        zle reset-prompt
    fi
}
zle -N _local_files
bindkey '^[e' _local_files

_kill_process() {
    zle kill-buffer
    local process=$(ps -N --ppid 2 -p 2 -o s,user,pid,pcpu,pmem,comm --sort -pcpu,-pmem | fzf --header-lines=1 | awk '{print $3}')
    if [[ -n $process ]]; then
        echo $process
        zle redisplay
        kill $process 2> /dev/null || sudo kill $process
        zle accept-line
    else
        zle reset-prompt
    fi
}
zle -N _kill_process
bindkey '^[k' _kill_process

_parent_dir() {
    cd ..
    zle kill-buffer
    zle accept-line
}
zle -N _parent_dir
bindkey '^[[1;3A' _parent_dir

# fs() {
#     local -r fmt='#{session_id}:|#S|(#{session_attached} attached)'
#     { tmux display-message -p -F "$fmt" && tmux list-sessions -F "$fmt"; } \
#         | awk '!seen[$1]++' \
#         | column -t -s'|' \
#         | fzf -q '$' --reverse --prompt 'switch session: ' -1 -0 \
#         | cut -d':' -f1 \
#         | xargs tmux switch-client -t
# }

# fs() {
#   local session
#   session=$(tmux list-sessions -F "#{session_name}" | \
#     fzf --query="$1" --select-1 --exit-0) &&
#   tmux switch-client -t "$session"
# }

# tm() {
#   [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
#   if [ $1 ]; then
#     tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
#   fi
#   session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
# }

# PLUGINS

# TODO: install fzf as a zsh plugin or using install script
if [[ ! "$PATH" == *$HOME/.fzf/bin* ]]; then
  export PATH="${PATH:+${PATH}:}$HOME/.fzf/bin"
fi

source "$HOME/.fzf/shell/key-bindings.zsh"

bindkey '^[r' fzf-history-widget

export FZF_DEFAULT_OPTS="
    --height=50% --reverse --inline-info
    --bind 'tab:down,btab:up,alt-q:abort,alt-n:down,alt-p:up,alt-j:down,alt-k:up,change:top'
    --color fg:-1,bg:-1,bg+:-1
    --no-hscroll
"
export FZF_ALT_C_OPTS="--prompt='./' --preview 'tree -C {} | head -200'"

# TODO: install direnv
eval "$(direnv hook zsh)"
# eval "$(/home/jonas/anaconda3/bin/conda shell.zsh hook)"
# eval "$(/opt/miniconda3/bin/conda shell.zsh hook)"

eval "$(fasd --init zsh-hook zsh-ccomp zsh-ccomp-install zsh-wcomp zsh-wcomp-install)"
#compdef c=fasd_cd

v() {
    if [[ -n $@ ]]; then
        local file=$(fasd -f $@)
        [[ -n $file ]] && vim "${file}"
    else
        local file=$(fasd -ftlR | fzf --no-sort --tiebreak=index)
        [[ -n $file ]] && vim "${file}"
    fi
}
c() {
    if [[ -n $@ ]]; then
        local dir=$(fasd -d $@)
        [[ -n $dir ]] && cd "${dir}"
    else
        local dir=$(fasd -dtlR | fzf --no-sort --tiebreak=index)
        [[ -n $dir ]] && cd "${dir}"
    fi
}

_v() {
    zle kill-buffer
    local file=$(fasd -ftlR | fzf --exact --no-sort --tiebreak=index)
    if [[ -n $file ]]; then
        zle redisplay
        BUFFER="vim \"${file}\""
        zle accept-line
    else
        zle reset-prompt
    fi
}
zle -N _v
bindkey '^[v' _v

_e() {
    zle kill-buffer
    # local var=$( (env; declare -x; set) | sort -u | cut -d= -f1 | fzf)
    local var=$( declare | grep "^\S\+=" | cut -d= -f1 | fzf )
    if [[ -n $var ]]; then
        zle redisplay
        BUFFER="echo \$$var"
        zle accept-line
    else
        zle reset-prompt
    fi
}
zle -N _e
bindkey '€' _e

_parent_dir() {
    cd ..
    zle kill-buffer
    zle accept-line
}
zle -N _parent_dir
bindkey '^U'  _parent_dir

# which edit
we() {
  vim $(which $1)
}


source "$HOME/.zgen/zgen.zsh"

if ! zgen saved; then

    zgen load zsh-users/zsh-completions src

    zgen load zsh-users/zsh-syntax-highlighting
    zgen load zsh-users/zsh-history-substring-search
    zgen load zsh-users/zsh-autosuggestions

    zgen load romkatv/powerlevel10k powerlevel10k

    zgen save
fi

# After plugin load

# Custom completion
fpath=($HOME/.zcomp ${fpath})

# ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor)
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets line)
#ZSH_HIGHLIGHT_STYLES[path]=none

bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

# In case prompt plugin/zgen is not available
# autoload -Uz promptinit && promptinit

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/root/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/root/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/root/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/root/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

alias s='status'
alias mon='tail -f /tmp/runlog'
run() { nohup batch_run "$@" > /tmp/runlog & tail -f /tmp/runlog}
